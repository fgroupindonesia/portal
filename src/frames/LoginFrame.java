/*
 *  This is a Portal Access for Client & Admin Usage
 *  (c) FGroupIndonesia, 2020.
 */

package frames;

import beans.AccessToken;
import beans.RemoteLogin;
import beans.User;

import com.google.gson.Gson;
import helper.BarcodeGenerator;
import helper.CMDExecutor;
import helper.language.Comp;
import helper.HttpCall;
import helper.JSONChecker;
import helper.language.LanguageSwitcher;
import helper.SWTKey;
import helper.SWThreadWorker;
import helper.UIDragger;
import helper.UIEffect;
import helper.WebReference;
import helper.preferences.Keys;
import helper.preferences.SettingPreference;
import java.awt.CardLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author ASUS
 */
public class LoginFrame extends javax.swing.JFrame implements HttpCall.HttpProcess {

    /**
     * Creates new form Login
     */
    Point initialClick;
    CardLayout cardLayouter;
    boolean internetExist, formCompleted;
    String macID;
    LanguageSwitcher languageHelper;

    public LoginFrame() {
        initComponents();
//        this.setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 50, 50));
        UIDragger.setFrame(this);
        UIEffect.iconChanger(this);

        labelSpacing.setText("");
        labelLoading.setVisible(false);
        cardLayouter = (CardLayout) (panelBase.getLayout());

        applyLanguageUI();
    }

    @Override
    public void setVisible(boolean b) {
        applyLanguageUI();
        currentlyLoggedIn = false;
        super.setVisible(b);
    }

    private void applyLanguageUI() {

        languageHelper = new LanguageSwitcher(configuration);

        languageHelper.apply(labelTitleLogin, "labelTitleLogin", Comp.LABEL);
        languageHelper.apply(labelUsernameLogin, "labelUsernameLogin", Comp.LABEL);
        languageHelper.apply(labelPasswordLogin, "labelPasswordLogin", Comp.LABEL);
        languageHelper.apply(labelLinkLoginPhone, "labelLinkLoginPhone", Comp.LABEL);
        languageHelper.apply(labelLinkNormalLogin, "labelLinkNormalLogin", Comp.LABEL);
        languageHelper.apply(labelCaptureQR, "labelCaptureQR", Comp.LABEL);

        languageHelper.apply(buttonLogin, "buttonLogin", Comp.BUTTON);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBase = new javax.swing.JPanel();
        panelLogin = new javax.swing.JPanel();
        labelUsernameLogin = new javax.swing.JLabel();
        textfieldUsername = new javax.swing.JTextField();
        labelPasswordLogin = new javax.swing.JLabel();
        buttonLogin = new javax.swing.JButton();
        labelLinkLoginPhone = new javax.swing.JLabel();
        panelHeader = new javax.swing.JPanel();
        labelClose = new javax.swing.JLabel();
        labelTitleLogin = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textfieldPass = new javax.swing.JPasswordField();
        labelSpacing = new javax.swing.JLabel();
        labelLoading = new javax.swing.JLabel();
        panelPhoneLogin = new javax.swing.JPanel();
        labelBarcode = new javax.swing.JLabel();
        labelLinkNormalLogin = new javax.swing.JLabel();
        labelCaptureQR = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        panelBase.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panelBase.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelBaseMouseDragged(evt);
            }
        });
        panelBase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelBaseMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelBaseMouseReleased(evt);
            }
        });
        panelBase.setLayout(new java.awt.CardLayout());

        panelLogin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelUsernameLogin.setText("Username:");
        panelLogin.add(labelUsernameLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 150, -1));

        textfieldUsername.setText("admin");
        textfieldUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textfieldUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textfieldUsernameFocusLost(evt);
            }
        });
        textfieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldUsernameActionPerformed(evt);
            }
        });
        textfieldUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textfieldUsernameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldUsernameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldUsernameKeyTyped(evt);
            }
        });
        panelLogin.add(textfieldUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 250, -1));

        labelPasswordLogin.setText("Password:");
        panelLogin.add(labelPasswordLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 150, -1));

        buttonLogin.setText("Login");
        buttonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoginActionPerformed(evt);
            }
        });
        panelLogin.add(buttonLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 100, 30));

        labelLinkLoginPhone.setForeground(new java.awt.Color(0, 102, 255));
        labelLinkLoginPhone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLinkLoginPhone.setText("<html><u>Logging in By Phone</u></html>");
        labelLinkLoginPhone.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelLinkLoginPhone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLinkLoginPhoneMouseClicked(evt);
            }
        });
        panelLogin.add(labelLinkLoginPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 170, 30));

        panelHeader.setBackground(new java.awt.Color(255, 0, 0));

        labelClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close24.png"))); // NOI18N
        labelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCloseMouseClicked(evt);
            }
        });

        labelTitleLogin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTitleLogin.setForeground(new java.awt.Color(255, 255, 255));
        labelTitleLogin.setText("Portal Access");

        javax.swing.GroupLayout panelHeaderLayout = new javax.swing.GroupLayout(panelHeader);
        panelHeader.setLayout(panelHeaderLayout);
        panelHeaderLayout.setHorizontalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHeaderLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(labelTitleLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(labelClose)
                .addGap(33, 33, 33))
        );
        panelHeaderLayout.setVerticalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelClose, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(labelTitleLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelLogin.add(panelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 50));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lock64.png"))); // NOI18N
        panelLogin.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, 110));

        textfieldPass.setText("admin");
        textfieldPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textfieldPassFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textfieldPassFocusLost(evt);
            }
        });
        textfieldPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldPassActionPerformed(evt);
            }
        });
        textfieldPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textfieldPassKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldPassKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldPassKeyTyped(evt);
            }
        });
        panelLogin.add(textfieldPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 250, -1));

        labelSpacing.setText("empty space");
        panelLogin.add(labelSpacing, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 130, 30));

        labelLoading.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loadingprel.gif"))); // NOI18N
        labelLoading.setText("Loading...");
        panelLogin.add(labelLoading, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 230, 220, 30));

        panelBase.add(panelLogin, "panelLogin");

        panelPhoneLogin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelBarcode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelBarcode.setText("Preview");
        labelBarcode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelPhoneLogin.add(labelBarcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 300, 160));

        labelLinkNormalLogin.setForeground(new java.awt.Color(0, 102, 255));
        labelLinkNormalLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left.png"))); // NOI18N
        labelLinkNormalLogin.setText("<html><u>Back to Normal Login</u></html>");
        labelLinkNormalLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelLinkNormalLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLinkNormalLoginMouseClicked(evt);
            }
        });
        panelPhoneLogin.add(labelLinkNormalLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 180, 20));

        labelCaptureQR.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        labelCaptureQR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCaptureQR.setText("Capture this QR Code using your Mobile Phone.");
        panelPhoneLogin.add(labelCaptureQR, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 300, -1));

        panelBase.add(panelPhoneLogin, "panelPhoneLogin");

        getContentPane().add(panelBase, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void panelBaseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBaseMousePressed

        UIDragger.mousePressed(evt);


    }//GEN-LAST:event_panelBaseMousePressed

    private void panelBaseMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBaseMouseDragged

        UIDragger.mouseDragged(evt);

    }//GEN-LAST:event_panelBaseMouseDragged

    private void labelLinkLoginPhoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLinkLoginPhoneMouseClicked

        // ask the server for what is my public ip address
        // it will be rendered as qrcode locally
        obtainIPAddress();


    }//GEN-LAST:event_labelLinkLoginPhoneMouseClicked

    private void labelLinkNormalLoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLinkNormalLoginMouseClicked
        cardLayouter.show(panelBase, "panelLogin");

        if (remoteLoginCheckWork != null) {
            remoteLoginCheckWork.stop();
        }

    }//GEN-LAST:event_labelLinkNormalLoginMouseClicked

    private void labelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_labelCloseMouseClicked

    private void textfieldUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldUsernameFocusGained
        UIEffect.focusGained(textfieldUsername);
    }//GEN-LAST:event_textfieldUsernameFocusGained

    private void textfieldUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldUsernameFocusLost
        UIEffect.focusLost(textfieldUsername);
    }//GEN-LAST:event_textfieldUsernameFocusLost

    private void textfieldPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldPassFocusGained
        UIEffect.focusGained(textfieldPass);
    }//GEN-LAST:event_textfieldPassFocusGained

    private void textfieldPassFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldPassFocusLost
        UIEffect.focusLost(textfieldPass);
    }//GEN-LAST:event_textfieldPassFocusLost

    private void buttonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoginActionPerformed

        proceedTestLoggingIn();

    }//GEN-LAST:event_buttonLoginActionPerformed

    private void proceedTestLoggingIn() {

        showMessageLoading(true, "loading...");
        buttonLogin.setEnabled(false);

        if (!internetExist) {
            testInternet();
        } else {
            apiLogging();
        }

    }

    ScheduledExecutorService executorService = Executors.newScheduledThreadPool(3);

    private void testInternet() {
        SWThreadWorker workTestInternet = new SWThreadWorker(this);
        workTestInternet.setWork(SWTKey.WORK_TEST_INTERNET);
        executorService.schedule(workTestInternet, 4, TimeUnit.SECONDS);

        labelLoading.setVisible(true);
    }

    private void apiLogging() {
        SWThreadWorker workLogging = new SWThreadWorker(this);

        workLogging.setWork(SWTKey.WORK_LOGIN);
        workLogging.addData("username", textfieldUsername.getText());
        workLogging.addData("password", textfieldPass.getText());

        executorService.schedule(workLogging, 3, TimeUnit.SECONDS);
        labelLoading.setVisible(true);
    }

    private void remoteLoggingCheck() {
        SWThreadWorker workLogging = new SWThreadWorker(this);

        workLogging.setWork(SWTKey.WORK_REMOTE_LOGIN_CHECK);
        workLogging.addData("machine_unique", macID);

        executorService.schedule(workLogging, 2, TimeUnit.SECONDS);
        labelLoading.setVisible(true);
    }

    private void obtainIPAddress() {

        macID = CMDExecutor.getMachineUniqueID();

        SWThreadWorker workObtain = new SWThreadWorker(this);

        workObtain.setWork(SWTKey.WORK_REMOTE_LOGIN_ACTIVATE);
        workObtain.addData("machine_unique", macID);

        executorService.schedule(workObtain, 3, TimeUnit.SECONDS);
        labelLoading.setVisible(true);
    }

    private void checkFormFilled() {

        if (!UIEffect.isEmpty(textfieldUsername) && !UIEffect.isEmpty(textfieldPass)) {
            buttonLogin.setEnabled(true);
            showErrorLoading(false, null);
            formCompleted = true;
        } else {
            buttonLogin.setEnabled(false);
            showErrorLoading(true, "Invalid username & password!");
            formCompleted = false;
        }

    }

    private void showMessageLoading(boolean b, String mess) {
        ImageIcon err = new ImageIcon(getClass().getResource("/images/loadingprel.gif"));
        labelLoading.setVisible(b);
        labelLoading.setIcon(err);
        labelLoading.setText(mess);
    }

    private void showErrorLoading(boolean b, String mess) {
        if (b) {
            // show
            ImageIcon err = new ImageIcon(getClass().getResource("/images/terminate.png"));

            labelLoading.setIcon(err);
            labelLoading.setText(mess);
        }

        labelLoading.setVisible(b);
    }


    private void textfieldPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldPassActionPerformed
        checkFormFilled();

        if (formCompleted) {
            proceedTestLoggingIn();
        }
    }//GEN-LAST:event_textfieldPassActionPerformed

    private void textfieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldUsernameActionPerformed
        checkFormFilled();

        if (formCompleted) {
            proceedTestLoggingIn();
        }
    }//GEN-LAST:event_textfieldUsernameActionPerformed

    private void textfieldUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUsernameKeyReleased
        if (!evt.isActionKey() && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            checkFormFilled();
        }
    }//GEN-LAST:event_textfieldUsernameKeyReleased

    private void textfieldPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldPassKeyReleased
        if (!evt.isActionKey() && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            checkFormFilled();
        }
    }//GEN-LAST:event_textfieldPassKeyReleased

    private void textfieldUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUsernameKeyPressed


    }//GEN-LAST:event_textfieldUsernameKeyPressed

    private void textfieldPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldPassKeyPressed

    }//GEN-LAST:event_textfieldPassKeyPressed

    private void textfieldUsernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUsernameKeyTyped

    }//GEN-LAST:event_textfieldUsernameKeyTyped

    private void textfieldPassKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldPassKeyTyped


    }//GEN-LAST:event_textfieldPassKeyTyped

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        UIDragger.setFrame(this);
    }//GEN-LAST:event_formWindowActivated

    private void panelBaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBaseMouseReleased
        UIDragger.mouseReleased(evt);
    }//GEN-LAST:event_panelBaseMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("windows".equalsIgnoreCase(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLogin;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel labelBarcode;
    private javax.swing.JLabel labelCaptureQR;
    private javax.swing.JLabel labelClose;
    private javax.swing.JLabel labelLinkLoginPhone;
    private javax.swing.JLabel labelLinkNormalLogin;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JLabel labelPasswordLogin;
    private javax.swing.JLabel labelSpacing;
    private javax.swing.JLabel labelTitleLogin;
    private javax.swing.JLabel labelUsernameLogin;
    private javax.swing.JPanel panelBase;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLogin;
    private javax.swing.JPanel panelPhoneLogin;
    private javax.swing.JPasswordField textfieldPass;
    private javax.swing.JTextField textfieldUsername;
    // End of variables declaration//GEN-END:variables

    SettingPreference configuration = new SettingPreference();

    @Override
    public void checkResponse(String resp, String callingFromURL) {

        Gson objectG = new Gson();

        System.out.println(callingFromURL + " have " + resp);
        JSONChecker jchecker = new JSONChecker();

        if (jchecker.isValid(resp)) {

            labelLoading.setVisible(false);

            // this is for testing internet availability only
            if (callingFromURL == null) {

                // continue executing
                internetExist = true;
                apiLogging();

            } else if (callingFromURL.equalsIgnoreCase(WebReference.LOGIN_USER)) {
                // now this is the usual process of logging in

                System.out.println("Logging success....");

                String innerData = jchecker.getValueAsString("multi_data");
                AccessToken dataIn = objectG.fromJson(innerData, AccessToken.class);

                System.out.println("Updating Configuration locally....");

                // update for this token
                configuration.setValue(Keys.TOKEN_API, dataIn.getToken());
                configuration.setValue(Keys.DATE_EXPIRED_TOKEN, dataIn.getExpired_date());

                if (textfieldUsername.getText().equalsIgnoreCase("admin")) {
                    AdminFrame nextFrame = new AdminFrame(this);
                    nextFrame.setVisible(true);
                } else {

                    User person = new User(textfieldUsername, textfieldPass);
                    ClientFrame nextFrame = new ClientFrame(this, person);
                    nextFrame.setVisible(true);
                }

                // dont let the button leave alone
                buttonLogin.setEnabled(true);
                this.setVisible(false);

            } else if (callingFromURL.equalsIgnoreCase(WebReference.REMOTE_LOGIN_ACTIVATE)) {

                System.out.println("Activating Remote Login success....");

                String innerData = jchecker.getValueAsString("multi_data");

                System.out.println("obtaining multi_data");

                JSONChecker jcheckerAnother = new JSONChecker(innerData);

                System.out.println("using jchecker");

                String innerAnotherData = jcheckerAnother.getValueAsString("machine_unique");

                System.out.println("Generating QRCode...");

                BarcodeGenerator qr = new BarcodeGenerator();
                qr.create(innerAnotherData, labelBarcode);

                cardLayouter.show(panelBase, "panelPhoneLogin");

                // now calling iteration by 10s interval for checking 'opened' remote login for this device
                iterateRemoteLoginCheck();

            } else if (callingFromURL.equalsIgnoreCase(WebReference.REMOTE_LOGIN_CHECK)) {

                // check the respond back returned
                String innerData = jchecker.getValueAsString("multi_data");

                System.out.println("remotelogincheck got " + innerData);

                JSONChecker anotherJCheck = new JSONChecker(innerData);
                RemoteLogin dataIn = null;

                if (anotherJCheck.isObject()) {
                    // this must be a 'ready' state not 'opened' yet
                    System.out.println("data is object");
                    dataIn = objectG.fromJson(innerData, RemoteLogin.class);
                } else {
                    // this must be a 'opened' state in an array form
                    System.out.println("data is array");
                    String tempRemoteData = anotherJCheck.getArrayValue(0).toString();
                    dataIn = objectG.fromJson(tempRemoteData, RemoteLogin.class);

                    if (dataIn.getStatus().equalsIgnoreCase("opened")) {

                        System.out.println("it is opened");

                        String tempTokenData = anotherJCheck.getArrayValue(1).toString();

                        AccessToken tokenDataCheck = objectG.fromJson(tempTokenData, AccessToken.class);

                        System.out.println("Updating Configuration locally from Remote Login....");

                        // update for this token
                        configuration.setValue(Keys.TOKEN_API, tokenDataCheck.getToken());
                        configuration.setValue(Keys.DATE_EXPIRED_TOKEN, tokenDataCheck.getExpired_date());

                        // and proceed to the next UI frames
                        if (dataIn.getUsername().equalsIgnoreCase("admin")) {
                            AdminFrame nextFrame = new AdminFrame(this);
                            nextFrame.setVisible(true);
                        } else {
                            // password we make it empty
                            User person = new User(dataIn.getUsername(), "");
                            ClientFrame nextFrame = new ClientFrame(this, person);
                            nextFrame.setVisible(true);
                        }

                        // show back the UI to login UI
                        cardLayouter.show(panelBase, "panelLogin");

                        // dont let the button leave alone
                        // hide the login UI
                        buttonLogin.setEnabled(true);
                        this.setVisible(false);

                    }

                }

                System.out.println("The status is " + dataIn.getStatus());

                if (dataIn.getStatus().equalsIgnoreCase("opened")) {
                    currentlyLoggedIn = true;
                    // for the timer to be stopped later automatically

                } else {
                    // if it is still 'ready' not 'opened' yet
                    // will keep the timer working on 
                    currentlyLoggedIn = false;
                }

            }

        } else {
            // this is when the call is invalid

            if (callingFromURL == null) {
                // set the error icon
                internetExist = false;
                showErrorLoading(true, "please check your internet!");

            } else {
                // set the error icon for bad cridentials
                showErrorLoading(true, "invalid username & password!");
            }

            // empty value for this token
            configuration.setValue(Keys.TOKEN_API, "");
            configuration.setValue(Keys.DATE_EXPIRED_TOKEN, "");

        }

    }

    Timer remoteLoginCheckWork;
    boolean currentlyLoggedIn = false;

    private void iterateRemoteLoginCheck() {

        // by 10 seconds to wait
        int sec = 10;
        int timeWait = 1000 * sec;

        remoteLoginCheckWork = new Timer(timeWait, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (currentlyLoggedIn) {
                    // stop me here
                    // but if it is not yet then keep checking
                    remoteLoginCheckWork.stop();
                } else {

                    // post again
                    remoteLoggingCheck();

                }

            }

        });
        remoteLoginCheckWork.start();

    }

}
