/*
 *  This is a Portal Access for Client & Admin Usage
 *  (c) FGroupIndonesia, 2020-2021.
 */
package frames;

import helper.PathReference;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author asus
 */
public class TyperGame extends javax.swing.JFrame {

    /**
     * Creates new form TyperGame
     */
    public TyperGame() {
        initComponents();
        readTheme();
        buttonPause.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelErrorScore = new javax.swing.JLabel();
        labelWPMScore = new javax.swing.JLabel();
        labelWPMScore1 = new javax.swing.JLabel();
        comboboxTheme = new javax.swing.JComboBox<>();
        buttonPlay = new javax.swing.JButton();
        buttonPause = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        labelTimeDuration = new javax.swing.JLabel();
        labelGIFAnimated = new javax.swing.JLabel();
        textfieldTemp = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textareaOverall = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 500));

        labelErrorScore.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        labelErrorScore.setText("Error : x | ");
        jPanel1.add(labelErrorScore);

        labelWPMScore.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        labelWPMScore.setText("WPM : x |");
        jPanel1.add(labelWPMScore);

        labelWPMScore1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        labelWPMScore1.setText("Playable Theme : ");
        jPanel1.add(labelWPMScore1);

        comboboxTheme.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(comboboxTheme);

        buttonPlay.setText("Play");
        buttonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayActionPerformed(evt);
            }
        });
        jPanel1.add(buttonPlay);

        buttonPause.setText("Pause");
        buttonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPauseActionPerformed(evt);
            }
        });
        jPanel1.add(buttonPause);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 75));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Typing Game");
        jLabel2.setPreferredSize(new java.awt.Dimension(130, 22));
        jPanel2.add(jLabel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(250, 65));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Time Out : ");
        jPanel3.add(jLabel5);

        labelTimeDuration.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTimeDuration.setText("00:00");
        jPanel3.add(labelTimeDuration);

        labelGIFAnimated.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emo_waiting.gif"))); // NOI18N
        jPanel3.add(labelGIFAnimated);

        jPanel2.add(jPanel3);

        textfieldTemp.setPreferredSize(new java.awt.Dimension(20, 20));
        textfieldTemp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldTempKeyTyped(evt);
            }
        });
        jPanel2.add(textfieldTemp);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        textareaOverall.setPreferredSize(new java.awt.Dimension(107, 100));
        textareaOverall.setContentType("text/html");
        jScrollPane2.setViewportView(textareaOverall);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayActionPerformed

        lockEverything(false);
        chooseTheme();
        startTime();
        textfieldTemp.requestFocus();

        buttonPause.setVisible(true);
        buttonPlay.setVisible(false);
    }//GEN-LAST:event_buttonPlayActionPerformed

    ImageIcon imageEh = new ImageIcon(getClass().getResource("/images/emo_eh.gif"));
    ImageIcon imageConfused = new ImageIcon(getClass().getResource("/images/emo_confused.gif"));
    ImageIcon imageStuck = new ImageIcon(getClass().getResource("/images/emo_stuck.gif"));
    ImageIcon imageScary = new ImageIcon(getClass().getResource("/images/emo_scary.gif"));

    ImageIcon imageReady = new ImageIcon(getClass().getResource("/images/emo_ready.gif"));
    ImageIcon imageHappy = new ImageIcon(getClass().getResource("/images/emo_happy.gif"));
    ImageIcon imageCool = new ImageIcon(getClass().getResource("/images/emo_cool.gif"));
    ImageIcon imageVStrong = new ImageIcon(getClass().getResource("/images/emo_vstrong.gif"));
    ImageIcon imageHoho = new ImageIcon(getClass().getResource("/images/emo_hoho.gif"));
    ImageIcon imageYahoo = new ImageIcon(getClass().getResource("/images/emo_yahoo.gif"));
    ImageIcon imageYeah = new ImageIcon(getClass().getResource("/images/emo_yeah.gif"));
    ImageIcon imageDrum = new ImageIcon(getClass().getResource("/images/emo_drum.gif"));

    private void showAnimError(int mode) {

        // mode will have different respond:
        // 1 is confused
        // 2 till 10 is stuck
        // 11 and more is scary
        if (mode == 1) {
            labelGIFAnimated.setIcon(imageEh);
        } else if (mode >= 2 && mode <= 10) {
            labelGIFAnimated.setIcon(imageConfused);
        } else if (mode >= 11 && mode <= 30) {
            labelGIFAnimated.setIcon(imageStuck);
        } else if (mode >= 31 && mode <= 40) {
            labelGIFAnimated.setIcon(imageScary);
        }

    }

    private void showAnimGood(int mode) {
        // mode for happy is the negative one
        // 1 till 5 is ready
        // 6 till 10 is strong
        // 11 till 20 is cool
        // 21 till 30 is vstrong
        if (mode >= 1 && mode <= 20) {
            labelGIFAnimated.setIcon(imageReady);
        } else if (mode >= 21 && mode <= 30) {
            labelGIFAnimated.setIcon(imageYeah);
        } else if (mode >= 31 && mode <= 40) {
            labelGIFAnimated.setIcon(imageHappy);
        } else if (mode >= 41 && mode <= 50) {
            labelGIFAnimated.setIcon(imageVStrong);
        } else if (mode >= 51 && mode <= 60) {
            labelGIFAnimated.setIcon(imageHoho);
        } else if (mode >= 61 && mode <= 70) {
            labelGIFAnimated.setIcon(imageCool);
        } else if (mode >= 71 && mode <= 80) {
            labelGIFAnimated.setIcon(imageDrum);
        } else if (mode >= 81 && mode <= 100) {
            labelGIFAnimated.setIcon(imageYahoo);
        }
    }

    String a, b;
    private void textfieldTempKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldTempKeyTyped

        // count the letter and animate the highlighting
        // grab the 0 to x position
        stbTemp = new StringBuffer(stb.toString().substring(xPost, xPost + 1));

        // check the letter pressed and the character given
        // if matched then blue
        // if doesn't match then red
        boolean cocok = false;
        a = String.valueOf(stb.toString().charAt(xPost));
        b = String.valueOf(evt.getKeyChar());

        cocok = a.equals(b);

        int warna = COLOR_BLUE;

        if (!cocok) {
            warna = COLOR_RED;
            errorCount++;
            labelErrorScore.setText("Error : " + errorCount + " | ");
            showAnimError(errorCount);
        } else if (evt.getKeyChar() == KeyEvent.VK_SPACE) {
            wordCount++;
            labelWPMScore.setText("WPM : " + wordCount + " | ");
            showAnimGood(wordCount);
        }

        xPost++;
        encapsulateHighlight(warna, stbTemp.toString(), stb.toString().substring(xPost));


    }//GEN-LAST:event_textfieldTempKeyTyped

    int recordedSecond;
    private void buttonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPauseActionPerformed

        recordedSecond = seconds;
        keep = false;

        buttonPause.setVisible(false);
        buttonPlay.setVisible(true);
    }//GEN-LAST:event_buttonPauseActionPerformed

    final int COLOR_RED = 1, COLOR_BLUE = 2;
    String openingSPAN = "<span style='font-weight:bold;color:";
    String blueSPAN = "blue'>";
    String redSPAN = "red'>";
    int errorCount, wordCount;

    int seconds = 60;
    final int TIME_WAIT = 1000;

    private String getTwoDigit(int v) {
        if (v < 10) {
            return "0" + v;
        }

        return String.valueOf(v);
    }

    boolean keep = true;

    private void startTime() {

        new Thread(new Runnable() {

            @Override
            public void run() {

                try {
                    while (keep) {
                        if (seconds != 0) {
                            Thread.sleep(TIME_WAIT);
                            seconds--;
                            labelTimeDuration.setText("00:" + getTwoDigit(seconds));
                        } else {
                            keep = false;
                            lockEverything(true);
                        }
                    }
                } catch (Exception ex) {
                }

            }
        }).start();

    }

    private void lockEverything(boolean b) {
        textareaOverall.setEnabled(!b);
        textfieldTemp.setEnabled(!b);
    }

    private void encapsulateHighlight(int kodeWarna, String dataIn, String restData) {
        StringBuffer stbHtml = new StringBuffer();
        stbHtml.append(openingSPAN);
        if (kodeWarna == COLOR_BLUE) {
            stbHtml.append(blueSPAN);
        } else {
            stbHtml.append(redSPAN);
        }

        stbHtml.append(dataIn);
        stbHtml.append("</span>");
        stbHtml.append("<span>");
        stbHtml.append(restData);
        stbHtml.append("</span>");

        textareaOverall.setContentType("text/html");
        textareaOverall.setText(stbHtml.toString());
        textareaOverall.setCaretPosition(0);
    }

    StringBuffer stb;
    StringBuffer stbTemp;
    int xPost;

    private void readTheme() {

        comboboxTheme.removeAllItems();

        File folderTarget = new File(PathReference.TyperDirName);
        for (String fn : folderTarget.list()) {
            comboboxTheme.addItem(fn);
        }

    }

    private void chooseTheme() {
        // read the typer/categories.db
        // according to the real file chosen
        String filename = comboboxTheme.getSelectedItem().toString();
        extractData(filename);
        textareaOverall.setCaretPosition(0);
    }

    private void extractData(String fileName) {

        FileReader fd = null;

        stb = new StringBuffer();

        try {
            // reading file
            File fileFound = new File(PathReference.getTyperPath(fileName));
            fd = new FileReader(fileFound);
            int ch;

            while ((ch = fd.read()) != -1) {
                stb.append((char) ch);
            }

        } catch (Exception ex) {
            System.err.println("Error while extracting data for typergame!");
        }

        textareaOverall.setText(stb.toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TyperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TyperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TyperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TyperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TyperGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPause;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JComboBox<String> comboboxTheme;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelErrorScore;
    private javax.swing.JLabel labelGIFAnimated;
    private javax.swing.JLabel labelTimeDuration;
    private javax.swing.JLabel labelWPMScore;
    private javax.swing.JLabel labelWPMScore1;
    private javax.swing.JEditorPane textareaOverall;
    private javax.swing.JTextField textfieldTemp;
    // End of variables declaration//GEN-END:variables
}
